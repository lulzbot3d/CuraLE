// Copyright (c) 2019 Ultimaker B.V.
// Cura is released under the terms of the LGPLv3 or higher.

import QtQuick 2.10
import QtQuick.Controls 2.3
import QtQuick.Layouts 1.3

import UM 1.3 as UM
import Cura 1.1 as Cura


//
// This component contains the content for the "Welcome" page of the welcome on-boarding process.
//
Cura.MachineAction
{
<<<<<<< HEAD
    id: base
    property var extrudersModel: Cura.ExtrudersModel{}
    property int extruderTabsCount: 0
    anchors.fill: parent;
=======
    UM.I18nCatalog { id: catalog; name: "cura" }
>>>>>>> 84d9d5bec40c7f7a0220af099f2dc5e437760336

    anchors.fill: parent

    property var extrudersModel: Cura.ExtrudersModel {}

    // If we create a TabButton for "Printer" and use Repeater for extruders, for some reason, once the component
    // finishes it will automatically change "currentIndex = 1", and it is VERY difficult to change "currentIndex = 0"
    // after that. Using a model and a Repeater to create both "Printer" and extruder TabButtons seem to solve this
    // problem.
    Connections
    {
        target: extrudersModel
        function onItemsChanged() { tabNameModel.update() }
    }

<<<<<<< HEAD

    ScrollView
    {
        id: scrollView
        anchors.fill: parent;
        frameVisible : true
        width: base.width;
        height: base.height
        implicitWidth: bedLevelMachineAction.width;
        implicitHeight: bedLevelMachineAction.height;


        Item
        {
            id: bedLevelMachineAction
            width: UM.Theme.getSize("modal_window_minimum").width
            height: UM.Theme.getSize("modal_window_minimum").height

            UM.I18nCatalog { id: catalog; name: "cura"; }

            property real columnWidth: Math.floor((width - 3 * UM.Theme.getSize("default_margin").width) / 3)
            property real gcodeColumnWidth: Math.floor((width - 3 * UM.Theme.getSize("default_margin").width) / 2)
            property real labelColumnWidth: columnWidth * 0.5

            Label
            {
                id: pageTitle
                width: parent.width
                text: catalog.i18nc("@title", "Machine Settings")
                wrapMode: Text.WordWrap
                font.pointSize: 18;
            }

            TabView
            {
                id: settingsTabs
                height: parent.height - y
                width: parent.width
                anchors.left: parent.left
                anchors.top: pageTitle.bottom
                anchors.topMargin: UM.Theme.getSize("default_margin").height

                property real columnWidth: Math.floor((width - 3 * UM.Theme.getSize("default_margin").width) / 3)
                property real gcodeColumnWidth: Math.floor((width - 3 * UM.Theme.getSize("default_margin").width) / 2)

                Tab
                {
                    title: catalog.i18nc("@title:tab", "Printer");
                    anchors.margins: UM.Theme.getSize("default_margin").width

                    Column
                    {
                        anchors.fill: parent

                        Row
                        {
                            spacing: UM.Theme.getSize("default_margin").height

                            Column
                            {
                                width: settingsTabs.columnWidth
                                spacing: UM.Theme.getSize("default_lining").height

                                Label
                                {
                                    text: catalog.i18nc("@label", "Printer Settings")
                                    font.bold: true
                                }

                                Item { width: UM.Theme.getSize("default_margin").width; height: UM.Theme.getSize("default_margin").height }

                                Loader
                                {
                                    id: buildAreaWidthField
                                    sourceComponent: numericTextFieldWithUnit
                                    property string settingKey: "machine_width"
                                    property string label: catalog.i18nc("@label", "X (Width)")
                                    property string unit: catalog.i18nc("@label", "mm")
                                    property bool forceUpdateOnChange: true
                                }

                                Loader
                                {
                                    id: buildAreaDepthField
                                    sourceComponent: numericTextFieldWithUnit
                                    property string settingKey: "machine_depth"
                                    property string label: catalog.i18nc("@label", "Y (Depth)")
                                    property string unit: catalog.i18nc("@label", "mm")
                                    property bool forceUpdateOnChange: true
                                }

                                Loader
                                {
                                    id: buildAreaHeightField
                                    sourceComponent: numericTextFieldWithUnit
                                    property string settingKey: "machine_height"
                                    property string label: catalog.i18nc("@label", "Z (Height)")
                                    property string unit: catalog.i18nc("@label", "mm")
                                    property bool forceUpdateOnChange: true
                                }

                                Item { width: UM.Theme.getSize("default_margin").width; height: UM.Theme.getSize("default_margin").height }

                                Loader
                                {
                                    id: shapeComboBox
                                    sourceComponent: comboBoxWithOptions
                                    property string settingKey: "machine_shape"
                                    property string label: catalog.i18nc("@label", "Build plate shape")
                                    property bool forceUpdateOnChange: true
                                }

                                Loader
                                {
                                    id: centerIsZeroCheckBox
                                    sourceComponent: simpleCheckBox
                                    property string settingKey: "machine_center_is_zero"
                                    property string label: catalog.i18nc("@option:check", "Origin at center")
                                    property bool forceUpdateOnChange: true
                                }
                                Loader
                                {
                                    id: heatedBedCheckBox
                                    sourceComponent: simpleCheckBox
                                    property var settingKey: "machine_heated_bed"
                                    property string label: catalog.i18nc("@option:check", "Heated bed")
                                    property bool forceUpdateOnChange: true
                                }

                                Item { width: UM.Theme.getSize("default_margin").width; height: UM.Theme.getSize("default_margin").height }

                                Loader
                                {
                                    id: gcodeFlavorComboBox
                                    sourceComponent: comboBoxWithOptions
                                    property string settingKey: "machine_gcode_flavor"
                                    property string label: catalog.i18nc("@label", "Gcode flavor")
                                    property bool forceUpdateOnChange: true
                                    property var afterOnActivate: manager.updateHasMaterialsMetadata
                                }
                            }

                            Column
                            {
                                width: settingsTabs.columnWidth
                                spacing: UM.Theme.getSize("default_lining").height

                                Label
                                {
                                    text: catalog.i18nc("@label", "Printhead Settings")
                                    font.bold: true
                                }

                                Item { width: UM.Theme.getSize("default_margin").width; height: UM.Theme.getSize("default_margin").height }

                                Loader
                                {
                                    id: printheadXMinField
                                    sourceComponent: headPolygonTextField
                                    property string label: catalog.i18nc("@label", "X min")
                                    property string tooltip: catalog.i18nc("@tooltip", "Distance from the left of the printhead to the center of the nozzle. Used to prevent colissions between previous prints and the printhead when printing \"One at a Time\".")
                                    property string axis: "x"
                                    property string side: "min"
                                }

                                Loader
                                {
                                    id: printheadYMinField
                                    sourceComponent: headPolygonTextField
                                    property string label: catalog.i18nc("@label", "Y min")
                                    property string tooltip: catalog.i18nc("@tooltip", "Distance from the front of the printhead to the center of the nozzle. Used to prevent colissions between previous prints and the printhead when printing \"One at a Time\".")
                                    property string axis: "y"
                                    property string side: "min"
                                }

                                Loader
                                {
                                    id: printheadXMaxField
                                    sourceComponent: headPolygonTextField
                                    property string label: catalog.i18nc("@label", "X max")
                                    property string tooltip: catalog.i18nc("@tooltip", "Distance from the right of the printhead to the center of the nozzle. Used to prevent colissions between previous prints and the printhead when printing \"One at a Time\".")
                                    property string axis: "x"
                                    property string side: "max"
                                }

                                Loader
                                {
                                    id: printheadYMaxField
                                    sourceComponent: headPolygonTextField
                                    property string label: catalog.i18nc("@label", "Y max")
                                    property string tooltip: catalog.i18nc("@tooltip", "Distance from the rear of the printhead to the center of the nozzle. Used to prevent colissions between previous prints and the printhead when printing \"One at a Time\".")
                                    property string axis: "y"
                                    property string side: "max"
                                }

                                Item { width: UM.Theme.getSize("default_margin").width; height: UM.Theme.getSize("default_margin").height }

                                Loader
                                {
                                    id: gantryHeightField
                                    sourceComponent: numericTextFieldWithUnit
                                    property string settingKey: "gantry_height"
                                    property string label: catalog.i18nc("@label", "Gantry height")
                                    property string unit: catalog.i18nc("@label", "mm")
                                    property string tooltip: catalog.i18nc("@tooltip", "The height difference between the tip of the nozzle and the gantry system (X and Y axes). Used to prevent collisions between previous prints and the gantry when printing \"One at a Time\".")
                                    property bool forceUpdateOnChange: true
                                }

                                Item { width: UM.Theme.getSize("default_margin").width; height: UM.Theme.getSize("default_margin").height }

                                UM.TooltipArea
                                {
                                    height: childrenRect.height
                                    width: childrenRect.width
                                    text: machineExtruderCountProvider.properties.description

                                    Row
                                    {
                                        spacing: UM.Theme.getSize("default_margin").width

                                        Label
                                        {
                                            text: catalog.i18nc("@label", "Number of Extruders")
                                            elide: Text.ElideRight
                                            width: Math.max(0, settingsTabs.labelColumnWidth)
                                            anchors.verticalCenter: extruderCountComboBox.verticalCenter
                                        }
                                        ComboBox
                                        {
                                            id: extruderCountComboBox
                                            model: ListModel
                                            {
                                                id: extruderCountModel
                                                Component.onCompleted:
                                                {
                                                    for(var i = 0; i < manager.definedExtruderCount; i++)
                                                    {
                                                        extruderCountModel.append({text: String(i + 1), value: i});
                                                    }
                                                }
                                            }

                                            Connections
                                            {
                                                target: manager
                                                onDefinedExtruderCountChanged:
                                                {
                                                    extruderCountModel.clear();
                                                    for(var i = 0; i < manager.definedExtruderCount; ++i)
                                                    {
                                                        extruderCountModel.append({text: String(i + 1), value: i});
                                                    }
                                                }
                                            }

                                            currentIndex: machineExtruderCountProvider.properties.value - 1
                                            onActivated:
                                            {
                                                manager.setMachineExtruderCount(index + 1);
                                            }
                                        }
                                    }
                                }
                            }
                            Column
                            {
                                width: settingsTabs.columnWidth
                                spacing: UM.Theme.getSize("default_margin").height

                                Label
                                {
                                    text: catalog.i18nc("@label", "Port:")
                                }
                                ComboBox
                                {
                                    model:
                                    {
                                        var port_list = Cura.USBPrinterManager.portList
                                        var ind = port_list.indexOf(machinePortProvider.properties.value)
                                        port_list.push("AUTO")
                                        return port_list
                                    }

                                    currentIndex:
                                    {
                                        var index = model.indexOf(machinePortProvider.properties.value);
                                        if(index == -1)
                                        {
                                            index = 0;
                                        }
                                        return index
                                    }

                                    onActivated:
                                    {
                                        machinePortProvider.setPropertyValue("value", model[index]);
                                    }
                                }

                                Label
                                {
                                    text: catalog.i18nc("@label", "Communication Speed:")
                                }
                                ComboBox
                                {
                                    model: ["AUTO", "250000", "230400", "115200", "57600", "38400", "19200", "9600"]

                                    currentIndex:
                                    {
                                        var index = model.indexOf(machineBaudrateProvider.properties.value);
                                        if(index == -1)
                                        {
                                            index = 0;
                                        }
                                        return index
                                    }
                                    onActivated:
                                    {
                                        machineBaudrateProvider.setPropertyValue("value", model[index]);
                                    }
                                }


                                CheckBox
                                {
                                    id: lcdCheckBox
                                    text: catalog.i18nc("@option:check", "LCD")
                                    checked: String(machineLCDProvider.properties.value).toLowerCase() != 'false'
                                    onClicked: machineLCDProvider.setPropertyValue("value", checked)
                                }
                            }
                        }

                        Row
                        {
                            spacing: UM.Theme.getSize("default_margin").width
                            anchors.left: parent.left
                            anchors.right: parent.right
                            height: parent.height - y

                            Column
                            {
                                height: parent.height
                                width: settingsTabs.gcodeColumnWidth
                                Label
                                {
                                    text: catalog.i18nc("@label", "Start Gcode")
                                    font.bold: true
                                }
                                Loader
                                {
                                    id: machineStartGcodeField
                                    sourceComponent: gcodeTextArea
                                    property int areaWidth: parent.width
                                    property int areaHeight: parent.height - y
                                    property string settingKey: "machine_start_gcode"
                                    property string tooltip: catalog.i18nc("@tooltip", "Gcode commands to be executed at the very start.")
                                }
                            }

                            Column {
                                height: parent.height
                                width: settingsTabs.gcodeColumnWidth
                                Label
                                {
                                    text: catalog.i18nc("@label", "End Gcode")
                                    font.bold: true
                                }
                                Loader
                                {
                                    id: machineEndGcodeField

                                    sourceComponent: gcodeTextArea
                                    property int areaWidth: parent.width
                                    property int areaHeight: parent.height - y
                                    property string settingKey: "machine_end_gcode"
                                    property string tooltip: catalog.i18nc("@tooltip", "Gcode commands to be executed at the very end.")
                                }
                            }
                        }
                    }
                }


                onCurrentIndexChanged:
                {
                    if(currentIndex > 0)
                    {
                        contentItem.forceActiveFocus();
                    }
                }

                Repeater
                {
                    id: extruderTabsRepeater
                    model: base.extruderTabsCount

                    Tab
                    {
                        title: base.extrudersModel.getItem(index).name
                        anchors.margins: UM.Theme.getSize("default_margin").width

                        Column
                        {
                            spacing: UM.Theme.getSize("default_lining").width

                            Label
                            {
                                text: catalog.i18nc("@label", "Nozzle Settings")
                                font.bold: true
                            }

                            Item { width: UM.Theme.getSize("default_margin").width; height: UM.Theme.getSize("default_margin").height }

                            Loader
                            {
                                id: extruderNozzleSizeField
                                visible: !Cura.MachineManager.hasVariants
                                sourceComponent: numericTextFieldWithUnit
                                property string settingKey: "machine_nozzle_size"
                                property string label: catalog.i18nc("@label", "Nozzle size")
                                property string unit: catalog.i18nc("@label", "mm")
                                property bool isExtruderSetting: true
                            }

                            Loader
                            {
                                id: materialDiameterField
                                visible: Cura.MachineManager.hasMaterials
                                sourceComponent: numericTextFieldWithUnit
                                property string settingKey: "material_diameter"
                                property string label: catalog.i18nc("@label", "Compatible material diameter")
                                property string unit: catalog.i18nc("@label", "mm")
                                property string tooltip: catalog.i18nc("@tooltip", "The nominal diameter of filament supported by the printer. The exact diameter will be overridden by the material and/or the profile.")
                                function afterOnEditingFinished()
                                {
                                    if (settingsTabs.currentIndex > 0)
                                    {
                                        manager.updateMaterialForDiameter(settingsTabs.currentIndex - 1);
                                    }
                                }
                                property bool isExtruderSetting: true
                            }

                            Loader
                            {
                                id: extruderOffsetXField
                                sourceComponent: numericTextFieldWithUnit
                                property string settingKey: "machine_nozzle_offset_x"
                                property string label: catalog.i18nc("@label", "Nozzle offset X")
                                property string unit: catalog.i18nc("@label", "mm")
                                property bool isExtruderSetting: true
                                property bool forceUpdateOnChange: true
                                property bool allowNegative: true
                            }

                            Loader
                            {
                                id: extruderOffsetYField
                                sourceComponent: numericTextFieldWithUnit
                                property string settingKey: "machine_nozzle_offset_y"
                                property string label: catalog.i18nc("@label", "Nozzle offset Y")
                                property string unit: catalog.i18nc("@label", "mm")
                                property bool isExtruderSetting: true
                                property bool forceUpdateOnChange: true
                                property bool allowNegative: true
                            }

                            Item { width: UM.Theme.getSize("default_margin").width; height: UM.Theme.getSize("default_margin").height }

                            Row
                            {
                                spacing: UM.Theme.getSize("default_margin").width
                                anchors.left: parent.left
                                anchors.right: parent.right
                                height: parent.height - y
                                Column
                                {
                                    height: parent.height
                                    width: settingsTabs.columnWidth
                                    Label
                                    {
                                        text: catalog.i18nc("@label", "Extruder Start Gcode")
                                        font.bold: true
                                    }
                                    Loader
                                    {
                                        id: extruderStartGcodeField
                                        sourceComponent: gcodeTextArea
                                        property int areaWidth: parent.width
                                        property int areaHeight: parent.height - y
                                        property string settingKey: "machine_extruder_start_code"
                                        property bool isExtruderSetting: true
                                    }
                                }
                                Column {
                                    height: parent.height
                                    width: settingsTabs.columnWidth
                                    Label
                                    {
                                        text: catalog.i18nc("@label", "Extruder End Gcode")
                                        font.bold: true
                                    }
                                    Loader
                                    {
                                        id: extruderEndGcodeField
                                        sourceComponent: gcodeTextArea
                                        property int areaWidth: parent.width
                                        property int areaHeight: parent.height - y
                                        property string settingKey: "machine_extruder_end_code"
                                        property bool isExtruderSetting: true
                                    }
                                }
                            }
                        }
                    }
                }
=======
    ListModel
    {
        id: tabNameModel

        Component.onCompleted: update()

        function update()
        {
            clear()
            append({ name: catalog.i18nc("@title:tab", "Printer") })
            for (var i = 0; i < extrudersModel.count; i++)
            {
                const m = extrudersModel.getItem(i)
                append({ name: m.name })
>>>>>>> 84d9d5bec40c7f7a0220af099f2dc5e437760336
            }
        }

    }

    Cura.RoundedRectangle
    {
        anchors
        {
            top: tabBar.bottom
            topMargin: -UM.Theme.getSize("default_lining").height
            bottom: parent.bottom
            left: parent.left
            right: parent.right
        }
        cornerSide: Cura.RoundedRectangle.Direction.Down
        border.color: UM.Theme.getColor("lining")
        border.width: UM.Theme.getSize("default_lining").width
        radius: UM.Theme.getSize("default_radius").width
        color: UM.Theme.getColor("main_background")
        StackLayout
        {
            id: tabStack
            anchors.fill: parent

            currentIndex: tabBar.currentIndex

            MachineSettingsPrinterTab
            {
                id: printerTab
            }

            Repeater
            {
                model: extrudersModel
                delegate: MachineSettingsExtruderTab
                {
                    id: discoverTab
                    extruderPosition: model.index
                    extruderStackId: model.id
                }
            }
        }
    }

    Label
    {
        id: machineNameLabel
        anchors.top: parent.top
        anchors.left: parent.left
        anchors.leftMargin: UM.Theme.getSize("default_margin").width
        text: Cura.MachineManager.activeMachine.name
        horizontalAlignment: Text.AlignHCenter
        font: UM.Theme.getFont("large_bold")
        renderType: Text.NativeRendering
    }

    UM.TabRow
    {
        id: tabBar
        anchors.top: machineNameLabel.bottom
        anchors.topMargin: UM.Theme.getSize("default_margin").height
        width: parent.width
        Repeater
        {
            model: tabNameModel
            delegate: UM.TabRowButton
            {
                text: model.name
            }
        }
    }
<<<<<<< HEAD

    property var printHeadPolygon:
    {
        "x": {
            "min": 0,
            "max": 0,
        },
        "y": {
            "min": 0,
            "max": 0,
        },
    }


    UM.SettingPropertyProvider
    {
        id: machineExtruderCountProvider

        containerStackId: Cura.MachineManager.activeMachineId
        key: "machine_extruder_count"
        watchedProperties: [ "value", "description" ]
        storeIndex: manager.containerIndex
    }

    UM.SettingPropertyProvider
    {
        id: machineHeadPolygonProvider

        containerStackId: Cura.MachineManager.activeMachineId
        key: "machine_head_with_fans_polygon"
        watchedProperties: [ "value" ]
        storeIndex: manager.containerIndex
    }

    UM.SettingPropertyProvider
    {
        id: machinePortProvider

        containerStackId: Cura.MachineManager.activeMachineId
        key: "machine_port"
        watchedProperties: [ "value" ]
        storeIndex: manager.containerIndex
    }

    UM.SettingPropertyProvider
    {
        id: machineBaudrateProvider

        containerStackId: Cura.MachineManager.activeMachineId
        key: "machine_baudrate"
        watchedProperties: [ "value" ]
        storeIndex: manager.containerIndex
    }

    UM.SettingPropertyProvider
    {
        id: machineLCDProvider

        containerStackId: Cura.MachineManager.activeMachineId
        key: "machine_has_lcd"
        watchedProperties: [ "value" ]
        storeIndex: manager.containerIndex
    }
    UM.SettingPropertyProvider
    {
        id: machineRevisionProvider

        containerStackId: Cura.MachineManager.activeMachineId
        key: "revision_type"
        watchedProperties: [ "value" ]
        storeIndex: manager.containerIndex
    }

    UM.SettingPropertyProvider
    {
        id: machineWidthProvider

        containerStackId: Cura.MachineManager.activeMachineId
        key: "machine_width"
        watchedProperties: [ "value" ]
        storeIndex: manager.containerIndex
    }
=======
>>>>>>> 84d9d5bec40c7f7a0220af099f2dc5e437760336
}
