project(cura)
cmake_minimum_required(VERSION 3.6)

include(GNUInstallDirs)

list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake)

set(URANIUM_DIR "${CMAKE_SOURCE_DIR}/../Uranium" CACHE PATH "The location of the Uranium repository")
set(URANIUM_SCRIPTS_DIR "${URANIUM_DIR}/scripts" CACHE PATH "The location of the scripts directory of the Uranium repository")

# Tests
include(CuraTests)

option(CURA_DEBUGMODE "Enable debug dialog and other debug features" OFF)

set(DEB_PACKAGE_TARGET_PLATFORM "default" CACHE STRING "Target OS Platform")

if (NOT MINIMUM_PYTHON_VERSION)
    set(MINIMUM_PYTHON_VERSION 3.5.0)
endif()
set(MINIMUM_PYTHON_VERSION ${MINIMUM_PYTHON_VERSION} CACHE STRING "Minimum Python Version")
if(CURA_DEBUGMODE)
    set(_cura_debugmode "ON")
endif()

option(GENERATE_TRANSLATIONS "Should the translations be generated?" ON)

set(CURA_APP_NAME "cura" CACHE STRING "Short name of Cura, used for configuration folder")
set(CURA_APP_DISPLAY_NAME "Ultimaker Cura" CACHE STRING "Display name of Cura")
set(CURA_VERSION "master" CACHE STRING "Version name of Cura")
set(CURA_BUILDTYPE "" CACHE STRING "Build type of Cura, eg. 'PPA'")
<<<<<<< HEAD
configure_file(${CMAKE_SOURCE_DIR}/cura-lulzbot.desktop.in ${CMAKE_BINARY_DIR}/cura-lulzbot.desktop @ONLY)
=======
set(CURA_CLOUD_API_ROOT "" CACHE STRING "Alternative Cura cloud API root")
set(CURA_CLOUD_API_VERSION "" CACHE STRING "Alternative Cura cloud API version")
set(CURA_CLOUD_ACCOUNT_API_ROOT "" CACHE STRING "Alternative Cura cloud account API version")
set(CURA_MARKETPLACE_ROOT "" CACHE STRING "Alternative Marketplace location")
set(CURA_DIGITAL_FACTORY_URL "" CACHE STRING "Alternative Digital Factory location")

configure_file(${CMAKE_SOURCE_DIR}/com.ultimaker.cura.desktop.in ${CMAKE_BINARY_DIR}/com.ultimaker.cura.desktop @ONLY)

>>>>>>> 84d9d5bec40c7f7a0220af099f2dc5e437760336
configure_file(cura/CuraVersion.py.in CuraVersion.py @ONLY)


# FIXME: The new FindPython3 finds the system's Python3.6 rather than the Python3.5 that we built for Cura's environment.
# So we're using the old method here, with FindPythonInterp for now.
find_package(PythonInterp 3 REQUIRED)

set(Python3_EXECUTABLE ${PYTHON_EXECUTABLE})

set(Python3_VERSION ${PYTHON_VERSION_STRING})
set(Python3_VERSION_MAJOR ${PYTHON_VERSION_MAJOR})
set(Python3_VERSION_MINOR ${PYTHON_VERSION_MINOR})
set(Python3_VERSION_PATCH ${PYTHON_VERSION_PATCH})

if(NOT ${URANIUM_DIR} STREQUAL "")
    set(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH};${URANIUM_DIR}/cmake")
endif()
if(NOT ${URANIUM_SCRIPTS_DIR} STREQUAL "")
    list(APPEND CMAKE_MODULE_PATH ${URANIUM_DIR}/cmake)
    include(UraniumTranslationTools)
    # Extract Strings
    add_custom_target(extract-messages ${URANIUM_SCRIPTS_DIR}/extract-messages ${CMAKE_SOURCE_DIR} cura)
    # Build Translations
    if(${GENERATE_TRANSLATIONS})
        CREATE_TRANSLATION_TARGETS()
    endif()
endif()

<<<<<<< HEAD
if (NOT BUILD_PYTHON)
    find_package(PythonInterp ${MINIMUM_PYTHON_VERSION} REQUIRED)
endif()

if(NOT PYTHON_SITE_PACKAGES_DIR)
	if(APPLE OR WIN32)
		set(PYTHON_SITE_PACKAGES_DIR lib/python${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}/site-packages
			CACHE STRING "Directory to install Python bindings to")
	else()
		set(PYTHON_SITE_PACKAGES_DIR lib/python${PYTHON_VERSION_MAJOR}/dist-packages
			CACHE STRING "Directory to install Python bindings to")
	endif()
	set(CURA_INSTALL_PLUGINS_PATH lib/cura)
else()
	set(CURA_INSTALL_PLUGINS_PATH ${CMAKE_INSTALL_LIBDIR}/cura)
endif()

install(DIRECTORY resources
        DESTINATION ${CMAKE_INSTALL_DATADIR}/cura)
install(DIRECTORY plugins
        DESTINATION ${CURA_INSTALL_PLUGINS_PATH})
=======

install(DIRECTORY resources
        DESTINATION ${CMAKE_INSTALL_DATADIR}/cura)

include(CuraPluginInstall)
>>>>>>> 84d9d5bec40c7f7a0220af099f2dc5e437760336

if(NOT APPLE AND NOT WIN32)
  if(DEB_PACKAGE_TARGET_PLATFORM STREQUAL "ubuntu-xenial")
    install(FILES cura_app.py
<<<<<<< HEAD
      DESTINATION ${CMAKE_INSTALL_BINDIR}
      PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
    install(FILES run_cura-lulzbot.sh
      DESTINATION ${CMAKE_INSTALL_BINDIR}
      PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE
      RENAME cura-lulzbot)
  else()
    install(FILES cura_app.py
      DESTINATION ${CMAKE_INSTALL_BINDIR}
      PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE
      RENAME cura-lulzbot)
  endif()

  install(DIRECTORY cura
    DESTINATION ${PYTHON_SITE_PACKAGES_DIR}
    FILES_MATCHING PATTERN *.py)
  install(FILES ${CMAKE_BINARY_DIR}/CuraVersion.py
    DESTINATION ${PYTHON_SITE_PACKAGES_DIR}/cura)
  install(FILES ${CMAKE_BINARY_DIR}/cura-lulzbot.desktop
    DESTINATION ${CMAKE_INSTALL_DATADIR}/applications)
  install(FILES cura.appdata.xml
    DESTINATION ${CMAKE_INSTALL_DATADIR}/appdata) # "appdata" is changed to "metainfo" in v3.1
  install(FILES cura.sharedmimeinfo
    DESTINATION ${CMAKE_INSTALL_DATADIR}/mime/packages/
    RENAME cura.xml)
  
#  install(FILES ${CMAKE_SOURCE_DIR}/resources/images/cura-icon.png
#    DESTINATION ${CMAKE_INSTALL_DATADIR}/icons/hicolor/128x128/apps/)

=======
            DESTINATION ${CMAKE_INSTALL_BINDIR}
            PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE
            RENAME cura)
    if(EXISTS /etc/debian_version)
        install(DIRECTORY cura
            DESTINATION lib${LIB_SUFFIX}/python${Python3_VERSION_MAJOR}/dist-packages
            FILES_MATCHING PATTERN *.py)
        install(FILES ${CMAKE_BINARY_DIR}/CuraVersion.py
            DESTINATION lib${LIB_SUFFIX}/python${Python3_VERSION_MAJOR}/dist-packages/cura)
    else()
        install(DIRECTORY cura
            DESTINATION lib${LIB_SUFFIX}/python${Python3_VERSION_MAJOR}.${Python3_VERSION_MINOR}/site-packages
            FILES_MATCHING PATTERN *.py)
        install(FILES ${CMAKE_BINARY_DIR}/CuraVersion.py
            DESTINATION lib${LIB_SUFFIX}/python${Python3_VERSION_MAJOR}.${Python3_VERSION_MINOR}/site-packages/cura)
    endif()
    install(FILES ${CMAKE_BINARY_DIR}/com.ultimaker.cura.desktop
            DESTINATION ${CMAKE_INSTALL_DATADIR}/applications)
    install(FILES ${CMAKE_SOURCE_DIR}/resources/images/cura-icon.png
            DESTINATION ${CMAKE_INSTALL_DATADIR}/icons/hicolor/128x128/apps/)
    install(FILES com.ultimaker.cura.appdata.xml
            DESTINATION ${CMAKE_INSTALL_DATADIR}/metainfo)
    install(FILES cura.sharedmimeinfo
            DESTINATION ${CMAKE_INSTALL_DATADIR}/mime/packages/
            RENAME cura.xml )
>>>>>>> 84d9d5bec40c7f7a0220af099f2dc5e437760336
else()
    install(FILES cura_app.py
            DESTINATION ${CMAKE_INSTALL_BINDIR}
            PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
    install(DIRECTORY cura
<<<<<<< HEAD
            DESTINATION ${PYTHON_SITE_PACKAGES_DIR}
            FILES_MATCHING PATTERN *.py)
    install(FILES ${CMAKE_BINARY_DIR}/CuraVersion.py
            DESTINATION ${PYTHON_SITE_PACKAGES_DIR}/cura)
=======
            DESTINATION lib${LIB_SUFFIX}/python${Python3_VERSION_MAJOR}.${Python3_VERSION_MINOR}/site-packages
            FILES_MATCHING PATTERN *.py)
    install(FILES ${CMAKE_BINARY_DIR}/CuraVersion.py
            DESTINATION lib${LIB_SUFFIX}/python${Python3_VERSION_MAJOR}.${Python3_VERSION_MINOR}/site-packages/cura)
>>>>>>> 84d9d5bec40c7f7a0220af099f2dc5e437760336
endif()

include(CPackConfig.cmake)
