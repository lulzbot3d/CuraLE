// Copyright (c) 2018 Ultimaker B.V.
// Cura is released under the terms of the LGPLv3 or higher.

import QtQuick 2.7
import QtQuick.Controls 1.4
import QtQuick.Window 2.1

import UM 1.2 as UM
import Cura 1.0 as Cura


UM.ManagementPage
{
    id: base;

    title: catalog.i18nc("@title:tab", "Printers");
    model: Cura.GlobalStacksModel { }

    sectionRole: "discoverySource"

    activeId: Cura.MachineManager.activeMachine !== null ? Cura.MachineManager.activeMachine.id: ""
    activeIndex: activeMachineIndex()

    function activeMachineIndex()
    {
        for(var i = 0; i < model.count; i++)
        {
            if (model.getItem(i).id == base.activeId)
            {
                return i;
            }
        }
        return -1;
    }

    buttons: [
        Button
        {
            id: activateMenuButton
            text: catalog.i18nc("@action:button", "Activate");
            iconName: "list-activate";
            enabled: base.currentItem != null && base.currentItem.id != Cura.MachineManager.activeMachine.id
            onClicked: Cura.MachineManager.setActiveMachine(base.currentItem.id)
        },
        Button
        {
<<<<<<< HEAD
            text: catalog.i18nc("@action:button", "Reset to default");
            enabled: base.currentItem != null && Cura.MachineManager.isMachineChanged(base.currentItem.id);
            onClicked: Cura.MachineManager.resetMachine(base.currentItem.id);
        },
        Button
        {
=======
            id: addMenuButton
>>>>>>> 84d9d5bec40c7f7a0220af099f2dc5e437760336
            text: catalog.i18nc("@action:button", "Add");
            iconName: "list-add";
            onClicked: Cura.Actions.addMachine.trigger()
        },
        Button
        {
            id: removeMenuButton
            text: catalog.i18nc("@action:button", "Remove");
            iconName: "list-remove";
            enabled: base.currentItem != null && model.count > 1
            onClicked: confirmDialog.open();
        },
        Button
        {
            id: renameMenuButton
            text: catalog.i18nc("@action:button", "Rename");
            iconName: "edit-rename";
            enabled: base.currentItem != null && base.currentItem.metadata.group_name == null
            onClicked: renameDialog.open();
        }
    ]

    Item
    {
        visible: base.currentItem != null
        anchors.fill: parent

        Label
        {
            id: machineName
            text: base.currentItem && base.currentItem.name ? base.currentItem.name : ""
            font: UM.Theme.getFont("large_bold")
            width: parent.width
            elide: Text.ElideRight
        }

        Flow
        {
            id: machineActions
            visible: currentItem && currentItem.id == Cura.MachineManager.activeMachine.id
            anchors.left: parent.left
            anchors.right: parent.right
            anchors.top: machineName.bottom
            anchors.topMargin: UM.Theme.getSize("default_margin").height
            anchors.bottomMargin: UM.Theme.getSize("default_margin").height
            Repeater
            {
                id: machineActionRepeater
                model: base.currentItem ? Cura.MachineActionManager.getSupportedActions(Cura.MachineManager.getDefinitionByMachineId(base.currentItem.id)) : null

                Item
                {
<<<<<<< HEAD
                    width: childrenRect.width + 2 * screenScaleFactor
                    height: childrenRect.height + 2 * screenScaleFactor
=======
                    width: Math.round(childrenRect.width + 2 * screenScaleFactor)
                    height: childrenRect.height
>>>>>>> 84d9d5bec40c7f7a0220af099f2dc5e437760336
                    Button
                    {
                        text: machineActionRepeater.model[index].label
                        onClicked:
                        {
                            var currentItem = machineActionRepeater.model[index]
                            actionDialog.loader.manager = currentItem
                            actionDialog.loader.source = currentItem.qmlPath
                            actionDialog.title = currentItem.label
                            actionDialog.show()
                        }
                    }
                }
            }
        }
        UM.Dialog
        {
            id: actionDialog
<<<<<<< HEAD
            property var content
            //minimumWidth: 350 * Screen.devicePixelRatio;
            //minimumHeight: 350 * Screen.devicePixelRatio;
            minimumWidth: UM.Theme.getSize("modal_window_minimum").width * 0.5
            minimumHeight: UM.Theme.getSize("modal_window_minimum").height * 0.5
            width: minimumWidth
            height: minimumHeight
            onContentChanged:
            {
                contents = content;
                width = minimumWidth
                height = minimumHeight
                content.onCompleted.connect(hide)
                content.dialog = actionDialog
            }
=======
            minimumWidth: UM.Theme.getSize("modal_window_minimum").width
            minimumHeight: UM.Theme.getSize("modal_window_minimum").height
            maximumWidth: minimumWidth * 3
            maximumHeight: minimumHeight * 3
>>>>>>> 84d9d5bec40c7f7a0220af099f2dc5e437760336
            rightButtons: Button
            {
                text: catalog.i18nc("@action:button", "Close")
                iconName: "dialog-close"
                onClicked: actionDialog.reject()
            }
        }

<<<<<<< HEAD
        Grid
        {
            id: machineInfo

            anchors.top: machineActions.visible ? machineActions.bottom : machineActions.anchors.top
            anchors.topMargin: UM.Theme.getSize("default_margin").height
            anchors.left: parent.left
            anchors.right: parent.right
            spacing: UM.Theme.getSize("default_margin").height
            rowSpacing: UM.Theme.getSize("default_lining").height
            columns: 2

            visible: base.currentItem

            property bool printerConnected: Cura.MachineManager.printerOutputDevices.length != 0
            property var connectedPrinter: printerConnected ? Cura.MachineManager.printerOutputDevices[0] : null
            property bool printerAcceptsCommands: printerConnected && Cura.MachineManager.printerOutputDevices[0].acceptsCommands

            Label
            {
                text: catalog.i18nc("@label", "Printer type:")
                visible: base.currentItem && "definition_name" in base.currentItem.metadata
            }
            Label
            {
                text: (base.currentItem && "definition_name" in base.currentItem.metadata) ? base.currentItem.metadata.definition_name : ""
            }
            Label
            {
                text: catalog.i18nc("@label", "Connection:")
                visible: base.currentItem && base.currentItem.id == Cura.MachineManager.activeMachineId
            }
            Label
            {
                width: (parent.width * 0.7) | 0
                text: machineInfo.printerConnected ? machineInfo.connectedPrinter.connectionText : catalog.i18nc("@info:status", "The printer is not connected.")
                visible: base.currentItem && base.currentItem.id == Cura.MachineManager.activeMachineId
                wrapMode: Text.WordWrap
            }
            Label
            {
                text: catalog.i18nc("@label", "State:")
                visible: base.currentItem && base.currentItem.id == Cura.MachineManager.activeMachineId && machineInfo.printerAcceptsCommands
            }
            Label {
                width: (parent.width * 0.7) | 0
                text:
                {
                    if(!machineInfo.printerConnected || !machineInfo.printerAcceptsCommands) {
                        return "";
                    }

                    switch(Cura.MachineManager.printerOutputDevices[0].jobState)
                    {
                        case "printing":
                            return catalog.i18nc("@label:MonitorStatus", "Printing...");
                        case "paused":
                            return catalog.i18nc("@label:MonitorStatus", "Paused");
                        case "pre_print":
                            return catalog.i18nc("@label:MonitorStatus", "Preparing...");
                        case "wait_cleanup":
                            return catalog.i18nc("@label:MonitorStatus", "Waiting for someone to clear the build plate");
                        case "error":
                            return printerOutputDevice.errorText;
                        case "maintenance":
                            return catalog.i18nc("@label:MonitorStatus", "In maintenance. Please check the printer");
                        case "abort":  // note sure if this jobState actually occurs in the wild
                            return catalog.i18nc("@label:MonitorStatus", "Aborting print...");
                        case "ready":  // ready to print or getting ready
                        case "":  // ready to print or getting ready
                            return catalog.i18nc("@label:MonitorStatus", "Waiting for a printjob");
                    }
                }
                visible: base.currentItem && base.currentItem.id == Cura.MachineManager.activeMachineId && machineInfo.printerAcceptsCommands
                wrapMode: Text.WordWrap
            }
            Label
            {
                text: catalog.i18nc("@label", "Firmware:")
                visible: base.currentItem && base.currentItem.id == Cura.MachineManager.activeMachineId && machineInfo.printerAcceptsCommands
            }
            Label {
                width: (parent.width * 0.7) | 0
                text:
                {
                    if(!machineInfo.printerConnected) {
                        return "";
                    }
                    return machineInfo.connectedPrinter.firmwareVersion;
                }
                visible: base.currentItem && base.currentItem.id == Cura.MachineManager.activeMachineId && machineInfo.printerAcceptsCommands
                wrapMode: Text.WordWrap
            }
        }

        Column {
            id: additionalComponentsColumn
            anchors.left: parent.left
            anchors.right: parent.right
            anchors.top: machineInfo.visible ? machineInfo.bottom : machineInfo.anchors.top
            anchors.topMargin: UM.Theme.getSize("default_margin").width

            spacing: UM.Theme.getSize("default_margin").width
            visible: base.currentItem && base.currentItem.id == Cura.MachineManager.activeMachineId

            Component.onCompleted:
            {
                for (var component in CuraApplication.additionalComponents["machinesDetailPane"]) {
                    CuraApplication.additionalComponents["machinesDetailPane"][component].parent = additionalComponentsColumn
                }
            }
        }

        Component.onCompleted: {
            addAdditionalComponents("machinesDetailPane")
        }

        Connections {
            target: CuraApplication
            onAdditionalComponentsChanged: addAdditionalComponents
        }

        function addAdditionalComponents (areaId) {
            if(areaId == "machinesDetailPane") {
                for (var component in CuraApplication.additionalComponents["machinesDetailPane"]) {
                    CuraApplication.additionalComponents["machinesDetailPane"][component].parent = additionalComponentsColumn
                }
            }
        }

=======
>>>>>>> 84d9d5bec40c7f7a0220af099f2dc5e437760336
        UM.I18nCatalog { id: catalog; name: "cura"; }

        UM.ConfirmRemoveDialog
        {
            id: confirmDialog
            object: base.currentItem && base.currentItem.name ? base.currentItem.name : ""
            text: base.currentItem ? base.currentItem.removalWarning : "";
            onYes:
            {
                Cura.MachineManager.removeMachine(base.currentItem.id)
                if(!base.currentItem)
                {
                    objectList.currentIndex = activeMachineIndex()
                }
                //Force updating currentItem and the details panel
                objectList.onCurrentIndexChanged()
            }
        }

        UM.RenameDialog
        {
            id: renameDialog;
            object: base.currentItem && base.currentItem.name ? base.currentItem.name : "";
            property var machine_name_validator: Cura.MachineNameValidator { }
            validName: renameDialog.newName.match(renameDialog.machine_name_validator.machineNameRegex) != null;
            onAccepted:
            {
                Cura.MachineManager.renameMachine(base.currentItem.id, newName.trim());
                //Force updating currentItem and the details panel
                objectList.onCurrentIndexChanged()
            }
        }

        Connections
        {
            target: Cura.MachineManager
            function onGlobalContainerChanged()
            {
                objectList.currentIndex = activeMachineIndex()
                objectList.onCurrentIndexChanged()
            }
        }

    }
}
